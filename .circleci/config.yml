# Python CircleCI 2.1 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1

executors:
  # Specify a common so-called executor containing the desired Python interpreter.
  tester:
    working_directory: ~/repo
    docker:
      - image: circleci/python:3.8
  publisher:
    working_directory: ~/repo
    docker:
      - image: circleci/python:3.8

workflows:
  # Create workflow for testing and deploying agentMET4FOF.
  test_and_deploy:
    jobs:
      - test_against_venv:
          filters:
            tags:
              # Include tag filter to trigger as well on tag pushes.
              only: /.*/
      - test_against_conda:
          filters:
            tags:
              # Include tag filter to trigger as well on tag pushes.
              only: /.*/
      - test_against_setup:
          filters:
            tags:
              # Include tag filter to trigger as well on tag pushes.
              only: /.*/
      - deploy:
          # Create 'deploy' job to upload agentMET4FOF to PyPI.org on certain tag
          # pushes, which successfully run 'test' job and are tagged with version.
          requires:
              - test_against_venv
              - test_against_conda
              - test_against_setup
          filters:
              tags:
                # Specify the tags which trigger the job as regular expression.
                only: /[0-9]*+(\.[0-9]+)*+(\.(dev)[0-9]+|((a|b)|rc)[0-9]+)?/
              branches:
                # This assures the job only being triggered by tag pushes.
                ignore: /.*/

commands:
  # Reusable command to prepare the environment for testing.
  create_result_folder:
    description: "Create test-result folder."
    steps:
    # Create folder for test results.
    - run:
        name: Create test result folder
        command: |
          mkdir -p test-reports

  run_venv_tests:
    description: "Run and store test results."
    # Define a parameter for the job, to be able to run all tests against different
    # sets of dependencies. This allows specifically to run the tests against the
    # possibly pinned versions from requirements.txt and against the automatically
    # installed most current versions from setup.py. The send_cov variable is only to
    # ensure that only one coverage report gets send for each commit.
    parameters:
      send_cov:
        type: boolean
        default: false

    steps:
    # Run tests! We use pytest's test-runner.
    - run:
        name: Run tests
        command: |
          source venv/bin/activate
          tox | tee --append test-reports/agentMET4FOF.log

    # Upload coverage report if the according parameter is set to `true`.
    - when:
        condition: << parameters.send_cov >>
        steps:
          - run:
              name: Upload coverage report
              command: |
                source venv/bin/activate
                bash <(curl -s https://codecov.io/bash)

    - store_test_artifacts_and_results

  store_test_artifacts_and_results:
    description: "Store test results."
    steps:
    # Store test results.
    - store_artifacts:
        path: test-reports
        destination: test-reports

    - store_test_results:
        path: test-reports

jobs:
  # Define one 'test' job to run their test suites against the
  # installed dependencies from the environment.yml.
  test_against_conda:

    executor: tester

    steps:
      - checkout
      - create_result_folder
      - run:
          name: Install Miniconda
          command: |
            wget "https://repo.anaconda.com/miniconda/\
            Miniconda3-latest-Linux-x86_64.sh" -O $HOME/miniconda.sh
            mkdir -p $HOME/.conda
            bash $HOME/miniconda.sh -b -p /home/circleci/conda
            source $HOME/conda/etc/profile.d/conda.sh
            hash -r
            conda config --set always_yes yes --set changeps1 no
            conda update -q conda
            echo 'export PATH=$HOME/conda/bin:$PATH' >> $BASH_ENV

      # Download and cache dependencies.
      - restore_cache:
          keys:
            # Specify the unique identifier for the cache.
            - v1-conda-dependencies-{{ checksum "environment.yml" }}-{{ checksum "requirements.txt" }}-{{ checksum "dev-requirements.txt" }}
            # Fallback to using the latest cache if no exact match is found.
            - v1-conda-dependencies-

      # Create environment and install extra_requires dependencies manually.
      - run:
          name: Create or update environment
          command: |
            if [ -d "$HOME/conda/envs/" ]; then
                conda env update --prune --file environment.yml
            else
                conda env create -f environment.yml
            fi
            source $HOME/conda/etc/profile.d/conda.sh
            conda activate agentMET4FOF

      - save_cache:
          paths:
            - /home/circleci/conda/envs/
          key: >-
            v1-conda-dependencies-{{ checksum "environment.yml" }}-{{ checksum "requirements.txt" }}-{{ checksum "dev-requirements.txt" }}

      # Run tests! We use pytest's test-runner.
      - run:
          name: Run tests
          command: |
            source $HOME/conda/etc/profile.d/conda.sh
            conda activate agentMET4FOF
            tox | tee --append test-reports/agentMET4FOF.log

      - store_test_artifacts_and_results


  # Define one 'test' job to run their test suites against the
  # installed dependencies from the setup.py.
  test_against_setup:

    executor: tester

    steps:
      - checkout
      - create_result_folder
      # Download and cache dependencies.
      - restore_cache:
          keys:
            # Specify the unique identifier for the cache.
            - v2-setup-dependencies-{{ checksum "setup.py" }}-{{ checksum "dev-requirements.txt" }}
            # Fallback to using the latest cache if no exact match is found.
            - v2-setup-dependencies-

      # Install dependencies.
      - run:
          name: Install dependencies
          command: |
            python3 -m venv venv
            source venv/bin/activate
            pip install --upgrade tox

      - save_cache:
          paths:
            - ./venv
          key: >-
            v2-setup-dependencies-{{ checksum "setup.py" }}-{{ checksum "dev-requirements.txt" }}

      # Run tests! We use pytest's test-runner and request to send coverage report.
      - run_venv_tests:
          send_cov: true

  # Define one 'test' job to run their test suites against the
  # installed dependencies from the requirements files.
  test_against_venv:

    executor: tester

    steps:
      - checkout
      - create_result_folder
      # Download and cache dependencies.
      - restore_cache:
          keys:
            # Specify the unique identifier for the cache.
            - v4-venv-dependencies-{{ checksum "dev-requirements.txt" }}
            # Fallback to using the latest cache if no exact match is found.
            - v4-venv-dependencies-

      # Install dependencies and extra_requires dependencies manually.
      - run:
          name: Install dependencies
          command: |
            python3 -m venv venv
            source venv/bin/activate
            pip install --upgrade pip tox

      - save_cache:
          paths:
            - ./venv
          key: >-
            v4-venv-dependencies-{{ checksum "dev-requirements.txt" }}

      # Run tests! We use pytest's test-runner.
      - run_venv_tests

  deploy:
    executor: publisher

    steps:
      # Checkout code.
      - checkout

      # Download and cache dependencies.
      - restore_cache:
          keys:
            # Specify the unique identifier for the cache.
            - v1-dependencies-deploy-{{ checksum "setup.py" }}-{{ checksum "requirements.txt" }}
            # Fallback to using the latest cache if no exact match is found.
            - v1-dependencies-deploy-

      # Install dependencies if necessary.
      - run:
         name: Install dependencies
         command: |
           python3 -m venv agent_venv
           source agent_venv/bin/activate
           pip install --upgrade -r requirements.txt
           pip install --upgrade setuptools wheel twine

      - save_cache:
          paths:
            - ./agent_venv
          key: v1-dependencies-deploy-{{ checksum "setup.py" }}-{{ checksum "requirements.txt" }}

      # Verify Git tag to version to ensure, only wanted versions are uploaded.
      - run:
          name: Verify Git tag vs. version
          command: |
            source agent_venv/bin/activate
            python setup.py verify

      # Create a package.
      - run:
          name: Create package
          command: |
            source agent_venv/bin/activate
            python3 setup.py sdist bdist_wheel

      # Store test results as artifacts.
      - store_artifacts:
         path: dist
         destination: dist

      # We create a .pypirc to provide the username and password.
      - run:
          name: Create .pypirc
          command: |
            echo -e "[pypi]" >> ~/.pypirc
            echo -e "username: __token__" >> ~/.pypirc
            echo -e "password: $PYPI_PASSWORD" >> ~/.pypirc

      # Upload the created packages to test.pypi.org.
      - run:
          name: Upload to PyPI.org
          command: |
            source agent_venv/bin/activate
            twine upload dist/*
