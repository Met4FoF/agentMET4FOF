# Python CircleCI 2.1 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1

executors:
  # Specify a common so-called executor containing the desired Python interpreter.
  python:
    docker:
      - image: circleci/python:3.7

workflows:
  # Create workflow for testing and deploying agentMET4FOF.
  test_and_deploy:
    jobs:
      # Create 'test' job to test agentMET4FOF for every commit.
      - test:
          filters:
              tags:
                # Include tag filter to trigger as well on tag pushes.
                only: /.*/
      - deploy:
          # Create 'deploy' job to upload agentMET4FOF to PyPI.org on certain tag
          # pushes, which successfully run 'test' job and are tagged with version.
          requires:
              - test
          filters:
              tags:
                # Specify the tags which trigger the job as regular expression.
                only: /[0-9]+(\.[0-9]+)*/
              branches:
                # This assures the job only being triggered by tag pushes.
                ignore: /.*/

jobs:
  test:
    executor: python

    working_directory: ~/repo

    steps:
      # Checkout code.
      - checkout

      # Create folder for test results.
      - run:
          name: Create test result folder
          command: |
            mkdir test-reports

      # Download and cache dependencies.
      - restore_cache:
          keys:
            # Specify the unique identifier for the cache.
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # Fallback to using the latest cache if no exact match is found.
            - v1-dependencies-

      # Install dependencies if necessary.
      - run:
         name: Install dependencies
         command: |
           python3 -m venv agent_venv
           source agent_venv/bin/activate
           pip install --upgrade pip
           pip install -r requirements.txt
           pip install pytest pytest-cov pytest-timeout

      - save_cache:
          paths:
            - ./agent_venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # Run tests with coverage report! We use pytest's test-runner.
      - run:
          name: Run agentMET4FOF tests
          command: |
            source agent_venv/bin/activate
            pytest -v --junitxml=test-reports/pytest.xml --cov=. . > \
            test-reports/agentMET4FOF.log

      # Upload coverage report.
      - run:
          name: Upload coverage report
          command: |
            source agent_venv/bin/activate
            bash <(curl -s https://codecov.io/bash)

      # Store test results as artifacts.
      - store_artifacts:
         path: test-reports
         destination: test-reports

      # Show test results as summary on job page.
      - store_test_results:
         path: test-reports

  deploy:
    executor: python

    working_directory: ~/repo

    steps:
      # Checkout code.
      - checkout

      # Download and cache dependencies.
      - restore_cache:
          keys:
            # Specify the unique identifier for the cache.
            - v1-dependency-cache-{{ checksum "setup.py" }}-{{ checksum "requirements.txt" }}
            # Fallback to using the latest cache if no exact match is found.
            - v1-dependencies-

      # Install dependencies if necessary.
      - run:
         name: Install dependencies
         command: |
           python3 -m venv agent_venv
           source agent_venv/bin/activate
           pip install -r requirements.txt
           pip install --upgrade setuptools wheel twine

      - save_cache:
          paths:
            - ./agent_venv
          key: v1-dependency-cache-{{ checksum "setup.py" }}-{{ checksum "requirements.txt" }}

      # Verify Git tag to version to ensure, only wanted versions are uploaded.
      - run:
          name: Verify Git tag vs. version
          command: |
            source agent_venv/bin/activate
            python setup.py verify

      # Create a package.
      - run:
          name: Create package
          command: |
            source agent_venv/bin/activate
            python3 setup.py sdist bdist_wheel

      # Store test results as artifacts.
      - store_artifacts:
         path: dist
         destination: dist

      # We create a .pypirc to provide the username and password.
      - run:
          name: Create .pypirc
          command: |
            echo -e "[pypi]" >> ~/.pypirc
            echo -e "username: __token__" >> ~/.pypirc
            echo -e "password: $PYPI_PASSWORD" >> ~/.pypirc

      # Upload the created packages to test.pypi.org.
      - run:
          name: Upload to PyPI.org
          command: |
            source agent_venv/bin/activate
            twine upload dist/*
